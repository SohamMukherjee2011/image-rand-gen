'''
##### TESTING FILE FOR RANDOM NUMBERS GENERATED #####
 To switch from testing the random numbers generated from the image
 to the random numbers generated by python's own library,
 simply change "floats.txt" in line 15 to "floats_test.txt"
 and "numbers.txt" to "text.txt" in line 26.
'''
import math, random
from collections import Counter
from statsmodels.tsa.stattools import acf
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm
#getting the data from the file
with open("floats.txt", 'r') as file:
    f = file.readlines()
    for i in range(len(f)):
        f[i] = float(f[i].strip())
    last_digits = []
    for t in f:
        fr_str = str(t).split(".")[1]
        dig = fr_str[-4:]
        last_digits.append(int(dig))
fl = [round(d / 9999, 4) for d in last_digits]
length = len(fl)
with open("numbers.txt", 'r') as file:
    history = file.readlines()
    for i in range(len(history)):
        history[i] = int(history[i].strip())
#OTHER TESTS

def shannon_entropy(data):
    if not data:
        return 0.0
    counts = Counter(data)
    total = len(data)
    return -sum((c / total) * math.log2(c / total) for c in counts.values())
def runs_test(sequence):
    median = np.median(sequence)
    signs = ['+' if val > median else '-' for val in sequence]

    
    runs = 1
    for i in range(1, len(signs)):
        if signs[i] != signs[i-1]:
            runs += 1

    n1 = signs.count('+')
    n2 = signs.count('-')
    n = n1 + n2

    if n1 == 0 or n2 == 0:
        print("All values fall on one side of median — not suitable for test.")
        return

    expected = (2 * n1 * n2) / n + 1
    variance = (2 * n1 * n2 * (2 * n1 * n2 - n)) / (n**2 * (n - 1))

    z = (runs - expected) / np.sqrt(variance)
    p_value = 2 * (1 - norm.cdf(abs(z)))

    print(f"Runs: {runs}")
    print(f"Expected Runs: {expected:.2f}")
    print(f"Z-score: {z:.2f}")
    print(f"P-value: {p_value:.4f}")

    if p_value < 0.05:
        print("Reject H₀ — sequence may not be random.")
    else:
        print("Fail to reject H₀ — sequence appears random.")

print("ENTROPY OF THE SET: ", shannon_entropy(history))
runs_test(history)
plt.hist(f, bins=50, edgecolor='black')
plt.title("Value Frequency Histogram")
plt.xlabel("Value (0-1)")
plt.ylabel("Frequency")
acf_vals = acf(history, nlags=20)
l, graph = plt.subplots()
graph.plot(acf_vals)
plt.title("Autocorrelation")
plt.show()
